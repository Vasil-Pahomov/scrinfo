#include <Arduino.h>
#include <NeoPixelBus.h>
#include "global.h"

//Каждый символ кодовой таблицы CP1251 представлен 16-битным беззнаковым целым числом
//младшие 12 бит числа определяют положение (в пикселях) левого края символа в картинке шрифта
//старшие 4 бита определяют ширину символа
#define FNT(p,w) p + (uint16_t)w*4096

const unsigned int font_tbl[] PROGMEM = {
FNT(0,WT),//0-end of line marker
FNT(1,2),//1-SOH
FNT(0,0),//2-STX
FNT(0,0),//3-ETX
FNT(0,0),//4-EOT
FNT(0,0),//5-ENQ
FNT(0,0),//6-ACK
FNT(0,0),//7-BEL
FNT(0,0),//8-BS
FNT(0,0),//9-TAB
FNT(0,0),//10-LF
FNT(0,0),//11-VT
FNT(0,0),//12-FF
FNT(0,0),//13-CR
FNT(0,0),//14-SO
FNT(0,0),//15-SI
FNT(0,0),//16-DLE
FNT(0,0),//17-DC1
FNT(0,0),//18-DC2
FNT(0,0),//19-DC3
FNT(0,0),//20-DC4
FNT(0,0),//21-NAK
FNT(0,0),//22-SYN
FNT(0,0),//23-ETB
FNT(0,0),//24-CAN
FNT(0,0),//25-EM
FNT(0,0),//26-SUB
FNT(0,0),//27-ESC
FNT(0,0),//28-FS
FNT(0,0),//29-GS
FNT(0,0),//30-RS
FNT(0,0),//31-US
FNT(0,1),//32-SP
FNT(554,2),//33-!
FNT(0,0),//34-"
FNT(0,0),//35-#
FNT(0,0),//36-$
FNT(0,0),//37-%
FNT(0,0),//38-&
FNT(0,0),//39-'
FNT(0,0),//40-(
FNT(0,0),//41-)
FNT(0,0),//42-*
FNT(0,0),//43-+
FNT(545,3),//44-,
FNT(549,4),//45--
FNT(542,2),//46-.
FNT(810,6),//47-/
FNT(4,6),//48-0
FNT(11,6),//49-1
FNT(18,6),//50-2
FNT(25,6),//51-3
FNT(32,6),//52-4
FNT(39,6),//53-5
FNT(46,6),//54-6
FNT(53,6),//55-7
FNT(60,6),//56-8
FNT(67,6),//57-9
FNT(0,0),//58-:
FNT(0,0),//59-;
FNT(0,0),//60-<
FNT(0,0),//61-=
FNT(0,0),//62->
FNT(0,0),//63-?
FNT(0,0),//64-@
FNT(74,6),//65-A
FNT(88,6),//66-B
FNT(184,6),//67-C
FNT(555,6),//68-D
FNT(111,6),//69-E
FNT(564,6),//70-F
FNT(571,6),//71-G
FNT(156,6),//72-H
FNT(578,4),//73-I
FNT(583,6),//74-J
FNT(134,6),//75-K
FNT(590,6),//76-L
FNT(148,7),//77-M
FNT(597,6),//78-N
FNT(163,6),//79-O
FNT(177,6),//80-P
FNT(604,7),//81-Q
FNT(612,6),//82-R
FNT(619,6),//83-S
FNT(191,6),//84-T
FNT(626,6),//85-U
FNT(633,6),//86-V
FNT(640,8),//87-W
FNT(214,6),//88-X
FNT(649,6),//89-Y
FNT(656,6),//90-Z
FNT(0,0),//91-[
FNT(0,0),//92-backslash
FNT(0,0),//93-]
FNT(0,0),//94-^
FNT(0,0),//95-_
FNT(0,0),//96-`
FNT(302,6),//97-a
FNT(663,6),//98-b
FNT(424,6),//99-c
FNT(670,6),//100-d
FNT(337,6),//101-e
FNT(677,5),//102-f
FNT(683,6),//103-g
FNT(690,6),//104-h
FNT(697,2),//105-i
FNT(700,5),//106-j
FNT(706,6),//107-k
FNT(713,2),//108-l
FNT(716,8),//109-m
FNT(725,6),//110-n
FNT(403,6),//111-o
FNT(417,6),//112-p
FNT(732,6),//113-q
FNT(739,5),//114-r
FNT(745,6),//115-s
FNT(752,6),//116-t
FNT(759,6),//117-u
FNT(766,6),//118-v
FNT(773,6),//119-w
FNT(454,6),//120-x
FNT(438,6),//121-y
FNT(782,6),//122-z
FNT(0,0),//123-{
FNT(0,0),//124-|
FNT(0,0),//125-}
FNT(0,0),//126-~
FNT(0,0),//127-DEL
FNT(0,0),//128-Ђ
FNT(0,0),//129-Ѓ
FNT(0,0),//130-‚
FNT(0,0),//131-ѓ
FNT(0,0),//132-„
FNT(0,0),//133-…
FNT(0,0),//134-†
FNT(0,0),//135-‡
FNT(0,0),//136-€
FNT(0,0),//137-‰
FNT(0,0),//138-Љ
FNT(0,0),//139-‹
FNT(0,0),//140-Њ
FNT(0,0),//141-Ќ
FNT(0,0),//142-Ћ
FNT(0,0),//143-Џ
FNT(0,0),//144-ђ
FNT(0,0),//145-‘
FNT(0,0),//146-’
FNT(0,0),//147-“
FNT(0,0),//148-”
FNT(0,0),//149-•
FNT(0,0),//150-–
FNT(0,0),//151-—
FNT(0,0),//152-
FNT(0,0),//153-™
FNT(0,0),//154-љ
FNT(0,0),//155-›
FNT(0,0),//156-њ
FNT(0,0),//157-ќ
FNT(0,0),//158-ћ
FNT(0,0),//159-џ
FNT(0,0),//160-
FNT(789,6),//161-Ў
FNT(796,6),//162-ў
FNT(0,0),//163-Ћ
FNT(0,0),//164-¤
FNT(0,0),//165-Ґ
FNT(0,0),//166-¦
FNT(0,0),//167-§
FNT(111,6),//168-Ё
FNT(0,0),//169-©
FNT(0,0),//170-Є
FNT(0,0),//171-«
FNT(0,0),//172-¬
FNT(0,0),//173-­
FNT(0,0),//174-®
FNT(0,0),//175-Ї
FNT(0,0),//176-°
FNT(0,0),//177-±
FNT(0,0),//178-І
FNT(0,0),//179-і
FNT(0,0),//180-ґ
FNT(0,0),//181-µ
FNT(0,0),//182-¶
FNT(0,0),//183-·
FNT(0,0),//184-ё
FNT(0,0),//185-№
FNT(0,0),//186-є
FNT(0,0),//187-»
FNT(0,0),//188-ј
FNT(0,0),//189-Ѕ
FNT(0,0),//190-ѕ
FNT(0,0),//191-ї
FNT(74,6),//192-А
FNT(81,6),//193-Б
FNT(88,6),//194-В
FNT(95,6),//195-Г
FNT(102,7),//196-Д
FNT(111,6),//197-Е
FNT(118,8),//198-Ж
FNT(25,6),//199-З
FNT(127,6),//200-И
FNT(803,6),//201-Й
FNT(134,6),//202-К
FNT(141,6),//203-Л
FNT(148,7),//204-М
FNT(156,6),//205-Н
FNT(163,6),//206-О
FNT(170,6),//207-П
FNT(177,6),//208-Р
FNT(184,6),//209-С
FNT(191,6),//210-Т
FNT(198,6),//211-У
FNT(205,8),//212-Ф
FNT(214,6),//213-Х
FNT(221,7),//214-Ц
FNT(229,6),//215-Ч
FNT(236,8),//216-Ш
FNT(245,9),//217-Щ
FNT(255,7),//218-Ъ
FNT(263,8),//219-Ы
FNT(272,6),//220-Ь
FNT(279,8),//221-Э
FNT(286,8),//222-Ю
FNT(295,6),//223-Я
FNT(302,6),//224-а
FNT(309,6),//225-б
FNT(316,6),//226-в
FNT(323,6),//227-г
FNT(330,6),//228-д
FNT(337,6),//229-е
FNT(344,8),//230-ж
FNT(353,6),//231-з
FNT(360,6),//232-и
FNT(367,6),//233-й
FNT(374,6),//234-к
FNT(381,6),//235-л
FNT(388,7),//236-м
FNT(396,6),//237-н
FNT(403,6),//238-о
FNT(410,6),//239-п
FNT(417,6),//240-р
FNT(424,6),//241-с
FNT(431,6),//242-т
FNT(438,6),//243-у
FNT(445,8),//244-ф
FNT(454,6),//245-х
FNT(461,7),//246-ц
FNT(469,6),//247-ч
FNT(476,8),//248-ш
FNT(485,9), //249-щ
FNT(495,7),//250-ъ
FNT(503,8),//251-ы
FNT(512,6),//252-ь
FNT(519,6),//253-э
FNT(526,8),//254-ю
FNT(535,6)//255-я
};

// 'font', 816x11px
const unsigned char font [] PROGMEM = {
	0x07, 0x86, 0x1e, 0x3c, 0x3d, 0xf9, 0xe7, 0xe7, 0x8f, 0x0c, 0x7e, 0xf9, 0xf8, 0x71, 0xfb, 0x6d, 
	0x9b, 0x30, 0xe8, 0x2c, 0xcf, 0x3f, 0x7c, 0x79, 0xfb, 0x33, 0xf3, 0x36, 0x66, 0x6d, 0xb6, 0xd9, 
	0xc1, 0x86, 0xc0, 0xf3, 0x38, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0xcf, 0xcf, 0x3c, 0x1b, 0x06, 0x67, 0x8f, 0x8f, 0x33, 0x66, 
	0xdb, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0x80, 0x06, 0x00, 0x0c, 0xce, 0x33, 0x66, 0x6d, 0x83, 0x30, 0x6c, 0xd9, 0x9e, 
	0x60, 0xcd, 0x80, 0xf1, 0x83, 0x6d, 0x9b, 0x31, 0xec, 0x6c, 0xd9, 0xb3, 0x66, 0xcc, 0x63, 0x36, 
	0xdb, 0x36, 0x66, 0x6d, 0xb6, 0xd8, 0xc1, 0x86, 0xc1, 0x9b, 0x6d, 0x98, 0x01, 0x80, 0x00, 0x0c, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0x19, 0x98, 0x1b, 
	0x06, 0x6c, 0xcc, 0xd9, 0xb3, 0x66, 0xdb, 0x66, 0x0d, 0x80, 0x31, 0xc0, 0x30, 0x00, 0x30, 0x60, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0xde, 0x03, 0x06, 
	0x6d, 0x83, 0x00, 0x6c, 0xd9, 0xb3, 0x60, 0xcd, 0x81, 0xb1, 0x83, 0x6d, 0x9b, 0x33, 0x6e, 0xec, 
	0xd9, 0xb3, 0x66, 0xc0, 0x63, 0x36, 0xdb, 0x36, 0x66, 0x6d, 0xb6, 0xd8, 0xc1, 0x86, 0xc0, 0x1b, 
	0x6d, 0x98, 0x03, 0x07, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x36, 0x6c, 0x18, 0x18, 0x1b, 0x06, 0x6c, 0xcc, 0xd8, 0x33, 0x66, 0xdb, 0x66, 0x19, 0x80, 
	0x33, 0x00, 0x30, 0x00, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x06, 0x63, 
	0x19, 0x83, 0x0c, 0xc6, 0x03, 0x06, 0x6d, 0x83, 0x00, 0xcc, 0xd9, 0xb3, 0x60, 0xcd, 0x81, 0xb1, 
	0x83, 0x6d, 0x9b, 0x36, 0x6f, 0xec, 0xd9, 0xb3, 0x66, 0xc0, 0x63, 0x36, 0xd9, 0xe6, 0x66, 0x6d, 
	0xb6, 0xd8, 0xc1, 0x86, 0xc0, 0x1b, 0x6d, 0x98, 0x03, 0x0d, 0x80, 0x06, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0x18, 0x18, 0x1b, 0x06, 0x6c, 0xcc, 0xd8, 
	0x33, 0x66, 0xdb, 0x66, 0x19, 0x80, 0x33, 0x0f, 0x30, 0x61, 0xb0, 0x60, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x00, 0x00, 0x06, 0x60, 0x19, 0x86, 0x0c, 0xc6, 0x03, 0x06, 0xcd, 0xf3, 0xe0, 0xcc, 
	0xd9, 0xb3, 0x7c, 0xcd, 0x81, 0xb1, 0x81, 0xf9, 0x9b, 0x66, 0x6d, 0x6c, 0xd9, 0xb3, 0x66, 0xc0, 
	0x63, 0x36, 0xd9, 0xe6, 0x66, 0x6d, 0xb6, 0xd8, 0xf9, 0xe6, 0xf8, 0x1b, 0x6d, 0x99, 0xe6, 0x0d, 
	0x8f, 0x03, 0x3c, 0xdb, 0x3c, 0xcd, 0x9b, 0x31, 0xe8, 0x2c, 0xcf, 0x3f, 0x3c, 0x79, 0xfb, 0x33, 
	0xf3, 0x36, 0x66, 0x6d, 0xb6, 0xd9, 0xc1, 0x86, 0xc0, 0xf3, 0x38, 0xf0, 0x00, 0x36, 0x6c, 0x18, 
	0x18, 0x1b, 0x06, 0x6c, 0xcc, 0xd8, 0x33, 0x66, 0xdb, 0x3c, 0x31, 0xf1, 0xf3, 0x19, 0xbe, 0x61, 
	0xb0, 0x6b, 0xe5, 0xc7, 0x96, 0x3c, 0x61, 0x9b, 0x36, 0xdb, 0xf6, 0x6c, 0xd9, 0x86, 0x0d, 0xc6, 
	0x03, 0x1c, 0xcc, 0x1b, 0x31, 0x87, 0x99, 0xb3, 0x66, 0xf9, 0x81, 0xb1, 0xe0, 0xf1, 0x9b, 0xc6, 
	0x6c, 0x6f, 0xd9, 0xb3, 0x66, 0xc0, 0x63, 0x36, 0xd8, 0xc6, 0x66, 0x6d, 0xb6, 0xd8, 0xcd, 0xb6, 
	0xcc, 0x3b, 0xec, 0x98, 0x37, 0xcf, 0x99, 0x9f, 0x66, 0xdb, 0x66, 0xcd, 0x9b, 0x63, 0xec, 0x6c, 
	0xd9, 0xb3, 0x66, 0xcc, 0x63, 0x36, 0xdb, 0x36, 0x66, 0x6d, 0xb6, 0xd8, 0xc1, 0x86, 0xc1, 0x9b, 
	0x6d, 0x98, 0x00, 0x36, 0x6f, 0x18, 0x18, 0x1b, 0x07, 0x6c, 0xcc, 0x8f, 0x33, 0x66, 0xdb, 0x3c, 
	0x31, 0x9b, 0x37, 0x99, 0xb3, 0x00, 0x33, 0x6d, 0xb6, 0x6c, 0xdb, 0x66, 0xf1, 0x9b, 0x36, 0xd8, 
	0x36, 0x6c, 0xd9, 0x8c, 0x0e, 0xc6, 0x06, 0x06, 0xcc, 0x1b, 0x31, 0x8c, 0xcf, 0xbf, 0x66, 0xcd, 
	0x81, 0xb1, 0x81, 0xf9, 0xbb, 0x66, 0x6c, 0x6c, 0xd9, 0xb3, 0x7c, 0xc0, 0x61, 0xf6, 0xd9, 0xe6, 
	0x63, 0xed, 0xb6, 0xd8, 0xcd, 0xb6, 0xcc, 0x1b, 0x6c, 0x79, 0xf6, 0x6c, 0xc1, 0xb3, 0x66, 0xdb, 
	0x06, 0xcd, 0x9b, 0xc7, 0x6e, 0xec, 0xd9, 0xb3, 0x66, 0xc0, 0x63, 0x36, 0xd9, 0xe6, 0x66, 0x6d, 
	0xb6, 0xd8, 0xf9, 0xe6, 0xf8, 0x1b, 0x6d, 0x98, 0x07, 0xb6, 0x6c, 0x18, 0x18, 0x1b, 0x06, 0xec, 
	0xcf, 0x01, 0xb3, 0x3c, 0xdb, 0x18, 0x31, 0x9b, 0x33, 0x19, 0xb3, 0x61, 0xb6, 0x6d, 0xb6, 0x6c, 
	0xd8, 0x60, 0x61, 0x9b, 0x36, 0xd8, 0x63, 0xec, 0xdb, 0x8c, 0x0c, 0xc6, 0x0c, 0x06, 0xfc, 0x1b, 
	0x31, 0x8c, 0xc1, 0xb3, 0x66, 0xcd, 0x81, 0xb1, 0x83, 0x6d, 0xdb, 0x36, 0x6c, 0x6c, 0xd9, 0xb3, 
	0x60, 0xc0, 0x60, 0x33, 0xf1, 0xe6, 0x60, 0x6d, 0xb6, 0xd8, 0xcd, 0xb6, 0xcc, 0x1b, 0x6c, 0xdb, 
	0x36, 0x6c, 0xcf, 0x33, 0x66, 0x7e, 0x0c, 0xcd, 0x9b, 0x86, 0x6f, 0xef, 0xd9, 0xb3, 0x66, 0xc0, 
	0x61, 0xf6, 0xd8, 0xc6, 0x66, 0x6d, 0xb6, 0xd8, 0xcd, 0xb6, 0xcc, 0x3b, 0xed, 0x98, 0x00, 0x36, 
	0x6c, 0x1b, 0x98, 0x1b, 0x06, 0x6d, 0xcd, 0x81, 0xb3, 0x3c, 0xdb, 0x18, 0x61, 0x9b, 0x33, 0x19, 
	0xb3, 0x61, 0xbc, 0x6d, 0xb6, 0x6c, 0xd8, 0x3c, 0x61, 0x99, 0xe6, 0xd8, 0xc0, 0x67, 0xdd, 0x98, 
	0x0c, 0xc6, 0x18, 0x06, 0x0c, 0x1b, 0x31, 0x8c, 0xc1, 0xb3, 0x66, 0xcd, 0x81, 0xb1, 0x83, 0x6d, 
	0x9b, 0x36, 0x6c, 0x6c, 0xd9, 0xb3, 0x60, 0xc0, 0x60, 0x30, 0xc3, 0x36, 0x60, 0x6d, 0xb6, 0xd8, 
	0xcd, 0xb6, 0xcc, 0x1b, 0x6d, 0x9b, 0x36, 0x6c, 0xd8, 0x33, 0x7c, 0xdb, 0x06, 0xcd, 0x9b, 0xc6, 
	0x6d, 0x6c, 0xd9, 0xb3, 0x7c, 0xc0, 0x60, 0x33, 0xf1, 0xe6, 0x63, 0xed, 0xb6, 0xd8, 0xcd, 0xb6, 
	0xcc, 0x1b, 0x6c, 0xf8, 0x00, 0x06, 0x6c, 0x19, 0x98, 0x1b, 0x06, 0x6c, 0xcc, 0xc1, 0xb3, 0x3c, 
	0xdb, 0x18, 0x61, 0x9b, 0x33, 0x0f, 0xb3, 0x61, 0xbc, 0x6d, 0xb6, 0x6c, 0xd8, 0x06, 0x61, 0x99, 
	0xe6, 0xd9, 0x80, 0x60, 0xd9, 0x98, 0x0c, 0xc6, 0x30, 0x66, 0x0d, 0x9b, 0x31, 0x8c, 0xd9, 0xb3, 
	0x66, 0xcd, 0x81, 0xb1, 0x83, 0x6d, 0x9b, 0x36, 0x6c, 0x6c, 0xd9, 0xb3, 0x60, 0xcc, 0x63, 0x30, 
	0xc3, 0x36, 0x60, 0x6d, 0xb6, 0xd8, 0xcd, 0xb6, 0xcd, 0x9b, 0x6d, 0x9b, 0x36, 0x6c, 0xd9, 0xb3, 
	0x60, 0xdb, 0x66, 0xcd, 0x9b, 0x66, 0x6c, 0x6c, 0xd9, 0xb3, 0x60, 0xcc, 0x63, 0x30, 0xc3, 0x36, 
	0x60, 0x6d, 0xb6, 0xd8, 0xcd, 0xb6, 0xcd, 0x9b, 0x6c, 0xdb, 0x60, 0x36, 0x6c, 0x19, 0x99, 0x9b, 
	0x06, 0x6c, 0xcc, 0xd9, 0xb3, 0x18, 0xff, 0x18, 0xc1, 0x9b, 0x33, 0x01, 0xb3, 0x6d, 0xb6, 0x6d, 
	0xb6, 0x67, 0xd8, 0x66, 0x6d, 0x98, 0xc6, 0xdb, 0x06, 0x6c, 0xd9, 0xb0, 0x07, 0x9f, 0xbf, 0x3c, 
	0x0c, 0xf1, 0xe1, 0x87, 0x8f, 0x33, 0x7c, 0xf9, 0x83, 0xf9, 0xfb, 0x6d, 0x9b, 0x36, 0x6c, 0x6c, 
	0xcf, 0x33, 0x60, 0x78, 0x61, 0xe0, 0xc3, 0x37, 0xf0, 0x6f, 0xf7, 0xfc, 0xf9, 0xe6, 0xf8, 0xf3, 
	0x39, 0x99, 0xd3, 0xc7, 0x8f, 0x1e, 0x3c, 0xdb, 0x3c, 0x74, 0xeb, 0x36, 0x6c, 0x6c, 0xcf, 0x33, 
	0x60, 0x78, 0x61, 0xe0, 0xc3, 0x33, 0xf0, 0x67, 0xe3, 0xfc, 0x78, 0xe6, 0x78, 0xf3, 0x39, 0x9b, 
	0x70, 0x37, 0xcc, 0x0f, 0x3c, 0xf3, 0xf6, 0x67, 0xac, 0xcf, 0x1e, 0x18, 0x66, 0x18, 0xfc, 0xf1, 
	0xf3, 0x07, 0x33, 0x67, 0x33, 0x6d, 0xb6, 0x60, 0xd8, 0x3c, 0x38, 0xf0, 0xc3, 0x33, 0xf3, 0xc7, 
	0x99, 0xb0
};

#define FONT_WIDTH_BYTES 102

//получение значения FNT для символа строки
uint16_t getfnt(byte c) {
  return pgm_read_word(font_tbl + c);
}

//расчёт X-позиции символа (пиксели) в шрифте по значению FNT
int getfpos(uint16_t fnt) {
  return fnt & 4095;
}

//расчёт ширины символа (пиксели) по значению
int getfwidth(uint16_t fnt) {
  return fnt / 4096;
}

void ticker_run_text(const char* text, RgbColor clr) {
  int kern = 1; //интервал между символами
  int xl = -WT;//текущее положение в пикселах внутри отображаемой буквы
  /*
  for (byte b=0;b<255;b++) {
    uint16_t fnt = getfnt(b);
    Serial.print("c=");Serial.print(b);
    Serial.print("\tfnt=");Serial.print(fnt);
    Serial.print("\tpos=");Serial.print(fpos(fnt));
    Serial.print("\twidth=");Serial.print(fwidth(fnt));
    Serial.println();
  }
  return;
  */
  

  while (true) {

    char * curtxt = (char*)text;
    int curxl = xl;

    /*
	uint16_t fnt = getfnt(*curtxt);
    Serial.print("chr=");Serial.print((byte)*curtxt);
    Serial.print("\tfnt=");Serial.print(fnt);
    Serial.print("\txl=");Serial.print(curxl);
    Serial.println();
	*/

    for (byte col=0;col<WT;col++) {
      uint16_t fnt = getfnt(*curtxt);

      int fpos = getfpos(fnt) + curxl;
      int fwidth = getfwidth(fnt);
      int byteoffset = (fpos) / 8;
      int bitmask = 1 << (7- (fpos % 8));
      //Serial.print(fpos);Serial.print('\t');

      for (byte row=0;row<HT;row++) {
        byte pi = (curxl >=0 && curxl < fwidth && *curtxt) 
          ? (pgm_read_byte(font + byteoffset + FONT_WIDTH_BYTES*row) & bitmask)
          : 0;
          
        set_pixel_color(col, row, pi ? clr : RgbColor(0,0,0));
      }

      curxl++;
      if (curxl > fwidth + kern) {
        //Serial.println(F("Next letter"));
        curxl = 0;
        curtxt++;
      }

      if (col == 0) {
        //сохраняем значения *text и curxl на текущие в 1м столбце - следующий раз будем начинать именно с них
        text = curtxt;
        xl = curxl;
      }
    }

    //Serial.println();

    if (*curtxt == 0 && curxl >= WT) {
      break;
    }

    bus_show();
    delay(100);
  }
}